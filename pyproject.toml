[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "django-container-manager"
version = "1.0.0"
description = "Django app for container orchestration with multi-executor support (Docker, Google Cloud Run, AWS Fargate)"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Sam Texas", email = "sam@example.com"},
]
maintainers = [
    {name = "Sam Texas", email = "sam@example.com"},
]
keywords = [
    "django",
    "containers", 
    "docker",
    "orchestration",
    "cloud-run",
    "aws-fargate",
    "job-queue",
    "task-runner"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1", 
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    "django>=4.2,<6.0",
    "docker>=6.0.0",
    "psutil>=5.9.0",
    "channels>=4.0.0",
    "channels-redis>=4.0.0",
    "google-cloud-logging>=3.12.1",
]

[project.optional-dependencies]
cloud = [
    "google-cloud-run>=0.10.0",
    "boto3>=1.26.0",
    "google-auth>=2.0.0",
]
dev = [
    "ruff>=0.1.0",
    "pytest>=7.0.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.0.0",
    "django-stubs>=4.2.0",
    "types-requests>=2.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.0.0",
    "factory-boy>=3.2.0",
    "freezegun>=1.2.0",
]

[project.urls]
Homepage = "https://github.com/samtexas/django-container-manager"
Documentation = "https://django-container-manager.readthedocs.io/"
Repository = "https://github.com/samtexas/django-container-manager.git"
Issues = "https://github.com/samtexas/django-container-manager/issues"
Changelog = "https://github.com/samtexas/django-container-manager/blob/main/CHANGELOG.md"

[project.scripts]
django-container-manager = "container_manager.cli:main"

[tool.hatch.version]
path = "container_manager/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["container_manager"]

[tool.hatch.build.targets.sdist]
include = [
    "/container_manager",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]
exclude = [
    "*.pyc",
    "__pycache__",
    ".pytest_cache",
    "*.egg-info",
]

# Ruff configuration for modern Python linting and formatting
[tool.ruff]
line-length = 88
target-version = "py310"
extend-exclude = [
    "migrations",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "DJ",   # flake8-django
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "DJ001",  # django model string representation
    "T201",   # print statements (useful for management commands)
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["T201", "S101"]  # Allow prints and asserts in tests
"*/migrations/*.py" = ["N806", "N999"]  # Ignore naming in migrations
"*/management/commands/*.py" = ["T201"]  # Allow prints in management commands

[tool.ruff.lint.isort]
known-first-party = ["container_manager"]
known-django = ["django"]
section-order = ["future", "standard-library", "django", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-source-first-line = false
line-ending = "auto"

# pytest configuration
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = "--tb=short --strict-markers --strict-config"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["container_manager"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "manage.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.10"
plugins = ["mypy_django_plugin.main"]
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.django-stubs]
django_settings_module = "tests.settings"
