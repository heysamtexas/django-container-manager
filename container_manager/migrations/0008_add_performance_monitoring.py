# Generated by Django 5.2.4 on 2025-07-26 14:12

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("container_manager", "0007_add_cost_tracking"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ExecutorPerformanceMetric",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("job_id", models.UUIDField(help_text="Reference to ContainerJob")),
                (
                    "executor_type",
                    models.CharField(
                        choices=[
                            ("docker", "Docker"),
                            ("cloudrun", "Google Cloud Run"),
                            ("fargate", "AWS Fargate"),
                            ("scaleway", "Scaleway Containers"),
                            ("mock", "Mock (Testing)"),
                        ],
                        help_text="Type of executor used",
                        max_length=50,
                    ),
                ),
                (
                    "host_name",
                    models.CharField(
                        help_text="Name of the Docker host/executor instance",
                        max_length=100,
                    ),
                ),
                (
                    "operation_type",
                    models.CharField(
                        choices=[
                            ("launch", "Job Launch"),
                            ("monitor", "Status Monitoring"),
                            ("cleanup", "Job Cleanup"),
                            ("log_collection", "Log Collection"),
                        ],
                        help_text="Type of operation being measured",
                        max_length=50,
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(help_text="Operation start timestamp"),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Operation completion timestamp",
                        null=True,
                    ),
                ),
                (
                    "duration_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Operation duration in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        default=False, help_text="Operation completed successfully"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if operation failed"
                    ),
                ),
                (
                    "cpu_usage_percent",
                    models.FloatField(
                        blank=True,
                        help_text="CPU usage percentage during operation",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "memory_usage_mb",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Memory usage in MB during operation",
                        null=True,
                    ),
                ),
                (
                    "network_bytes_sent",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Network bytes sent during operation",
                        null=True,
                    ),
                ),
                (
                    "network_bytes_received",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Network bytes received during operation",
                        null=True,
                    ),
                ),
                (
                    "executor_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Executor-specific performance data",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Executor Performance Metric",
                "verbose_name_plural": "Executor Performance Metrics",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["job_id"], name="container_m_job_id_aeebc4_idx"
                    ),
                    models.Index(
                        fields=["executor_type", "operation_type"],
                        name="container_m_executo_39cb25_idx",
                    ),
                    models.Index(
                        fields=["host_name", "created_at"],
                        name="container_m_host_na_60fd73_idx",
                    ),
                    models.Index(
                        fields=["start_time", "end_time"],
                        name="container_m_start_t_22f071_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ExecutorPerformanceSummary",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("executor_type", models.CharField(max_length=50)),
                ("host_name", models.CharField(blank=True, max_length=100)),
                ("operation_type", models.CharField(max_length=50)),
                (
                    "period_start",
                    models.DateTimeField(help_text="Start of summary period"),
                ),
                ("period_end", models.DateTimeField(help_text="End of summary period")),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                        ],
                        default="hourly",
                        max_length=20,
                    ),
                ),
                ("total_operations", models.PositiveIntegerField(default=0)),
                ("successful_operations", models.PositiveIntegerField(default=0)),
                ("failed_operations", models.PositiveIntegerField(default=0)),
                (
                    "avg_duration_ms",
                    models.FloatField(
                        blank=True,
                        help_text="Average operation duration in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "min_duration_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Minimum operation duration in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "max_duration_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum operation duration in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "p95_duration_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="95th percentile duration in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "p99_duration_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="99th percentile duration in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "avg_cpu_usage_percent",
                    models.FloatField(
                        blank=True, help_text="Average CPU usage percentage", null=True
                    ),
                ),
                (
                    "max_cpu_usage_percent",
                    models.FloatField(
                        blank=True, help_text="Maximum CPU usage percentage", null=True
                    ),
                ),
                (
                    "avg_memory_usage_mb",
                    models.FloatField(
                        blank=True, help_text="Average memory usage in MB", null=True
                    ),
                ),
                (
                    "max_memory_usage_mb",
                    models.PositiveIntegerField(
                        blank=True, help_text="Maximum memory usage in MB", null=True
                    ),
                ),
                (
                    "total_network_bytes_sent",
                    models.PositiveBigIntegerField(
                        blank=True, help_text="Total network bytes sent", null=True
                    ),
                ),
                (
                    "total_network_bytes_received",
                    models.PositiveBigIntegerField(
                        blank=True, help_text="Total network bytes received", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Executor Performance Summary",
                "verbose_name_plural": "Executor Performance Summaries",
                "ordering": ["-period_start"],
                "indexes": [
                    models.Index(
                        fields=["executor_type", "period_start"],
                        name="container_m_executo_e9eb19_idx",
                    ),
                    models.Index(
                        fields=["host_name", "period_start"],
                        name="container_m_host_na_ce1545_idx",
                    ),
                    models.Index(
                        fields=["period_type", "period_start"],
                        name="container_m_period__76524d_idx",
                    ),
                ],
                "unique_together": {
                    (
                        "executor_type",
                        "host_name",
                        "operation_type",
                        "period_start",
                        "period_type",
                    )
                },
            },
        ),
        migrations.CreateModel(
            name="PerformanceBottleneck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "bottleneck_type",
                    models.CharField(
                        choices=[
                            ("slow_launch", "Slow Job Launch"),
                            ("high_cpu", "High CPU Usage"),
                            ("high_memory", "High Memory Usage"),
                            ("network_latency", "Network Latency"),
                            ("frequent_failures", "Frequent Failures"),
                            ("timeout_issues", "Timeout Issues"),
                            ("resource_contention", "Resource Contention"),
                        ],
                        help_text="Type of performance bottleneck identified",
                        max_length=50,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Severity level of the bottleneck",
                        max_length=20,
                    ),
                ),
                ("executor_type", models.CharField(max_length=50)),
                ("host_name", models.CharField(blank=True, max_length=100)),
                ("operation_type", models.CharField(blank=True, max_length=50)),
                ("detected_at", models.DateTimeField(auto_now_add=True)),
                (
                    "first_observed",
                    models.DateTimeField(
                        help_text="When bottleneck was first observed"
                    ),
                ),
                (
                    "last_observed",
                    models.DateTimeField(help_text="When bottleneck was last observed"),
                ),
                (
                    "threshold_metric",
                    models.CharField(
                        help_text="Metric that exceeded threshold", max_length=50
                    ),
                ),
                (
                    "threshold_value",
                    models.FloatField(help_text="Threshold value that was exceeded"),
                ),
                (
                    "observed_value",
                    models.FloatField(help_text="Actual observed value"),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the bottleneck"
                    ),
                ),
                (
                    "impact_assessment",
                    models.TextField(
                        blank=True, help_text="Assessment of performance impact"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("investigating", "Investigating"),
                            ("resolved", "Resolved"),
                            ("false_positive", "False Positive"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                (
                    "related_metrics",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of metric IDs related to this bottleneck",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Performance Bottleneck",
                "verbose_name_plural": "Performance Bottlenecks",
                "ordering": ["-severity", "-detected_at"],
                "indexes": [
                    models.Index(
                        fields=["executor_type", "status"],
                        name="container_m_executo_605b00_idx",
                    ),
                    models.Index(
                        fields=["host_name", "status"],
                        name="container_m_host_na_e87948_idx",
                    ),
                    models.Index(
                        fields=["bottleneck_type", "severity"],
                        name="container_m_bottlen_5e9cd8_idx",
                    ),
                    models.Index(
                        fields=["detected_at"], name="container_m_detecte_a8fe08_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PerformanceRecommendation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("resource_scaling", "Resource Scaling"),
                            ("timeout_adjustment", "Timeout Adjustment"),
                            ("load_balancing", "Load Balancing"),
                            ("caching", "Caching"),
                            ("network_optimization", "Network Optimization"),
                            ("executor_selection", "Executor Selection"),
                            ("batch_optimization", "Batch Processing"),
                        ],
                        help_text="Type of optimization recommendation",
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        help_text="Implementation priority",
                        max_length=20,
                    ),
                ),
                ("executor_type", models.CharField(blank=True, max_length=50)),
                ("host_name", models.CharField(blank=True, max_length=100)),
                ("operation_type", models.CharField(blank=True, max_length=50)),
                (
                    "title",
                    models.CharField(
                        help_text="Short recommendation title", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed recommendation description"),
                ),
                (
                    "estimated_improvement_percent",
                    models.FloatField(
                        blank=True,
                        help_text="Estimated performance improvement percentage",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "implementation_effort",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="medium",
                        help_text="Estimated implementation effort",
                        max_length=20,
                    ),
                ),
                (
                    "supporting_metrics",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Metric IDs that support this recommendation",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("implemented", "Implemented"),
                            ("rejected", "Rejected"),
                            ("obsolete", "Obsolete"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("implemented_at", models.DateTimeField(blank=True, null=True)),
                ("implementation_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "based_on_bottleneck",
                    models.ForeignKey(
                        blank=True,
                        help_text="Bottleneck that triggered this recommendation",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="container_manager.performancebottleneck",
                    ),
                ),
            ],
            options={
                "verbose_name": "Performance Recommendation",
                "verbose_name_plural": "Performance Recommendations",
                "ordering": ["-priority", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["executor_type", "status"],
                        name="container_m_executo_abc2a4_idx",
                    ),
                    models.Index(
                        fields=["host_name", "status"],
                        name="container_m_host_na_22dcd6_idx",
                    ),
                    models.Index(
                        fields=["recommendation_type", "priority"],
                        name="container_m_recomme_9f78b5_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="container_m_created_d70210_idx"
                    ),
                ],
            },
        ),
    ]
