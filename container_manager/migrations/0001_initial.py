# Generated by Django 5.2.4 on 2025-07-27 12:48

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExecutorHost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('host_type', models.CharField(choices=[('tcp', 'TCP'), ('unix', 'Unix Socket')], default='unix', max_length=10)),
                ('connection_string', models.CharField(help_text='e.g., tcp://192.168.1.100:2376 or unix:///var/run/docker.sock', max_length=500)),
                ('tls_enabled', models.BooleanField(default=False)),
                ('tls_verify', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('auto_pull_images', models.BooleanField(default=True, help_text="Automatically pull Docker images that don't exist locally")),
                ('executor_type', models.CharField(choices=[('docker', 'Docker'), ('cloudrun', 'Google Cloud Run'), ('fargate', 'AWS Fargate'), ('scaleway', 'Scaleway Containers')], default='docker', help_text='Type of container executor this host represents', max_length=50)),
                ('executor_config', models.JSONField(blank=True, default=dict, help_text="Executor-specific configuration for this host. Examples:\n• Docker: {'base_url': 'tcp://host:2376', 'tls_verify': true}\n• Cloud Run: {'project': 'my-project', 'region': 'us-central1', 'service_account': 'sa@project.iam'}\n• AWS Fargate: {'cluster': 'my-cluster', 'subnets': ['subnet-123'], 'security_groups': ['sg-456']}\n• General: Any JSON config your custom executor implementation needs")),
                ('max_concurrent_jobs', models.PositiveIntegerField(default=10, help_text='Maximum number of concurrent jobs for this executor')),
                ('weight', models.PositiveIntegerField(default=100, help_text='Routing weight (higher = more preferred, 1-1000)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('current_job_count', models.PositiveIntegerField(default=0, help_text='Current number of running jobs on this host')),
                ('health_check_failures', models.PositiveIntegerField(default=0, help_text='Number of consecutive health check failures')),
                ('last_health_check', models.DateTimeField(blank=True, help_text='Timestamp of last health check', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Executor Host',
                'verbose_name_plural': 'Executor Hosts',
            },
        ),
        migrations.CreateModel(
            name='RoutingRuleSet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ab_test_enabled', models.BooleanField(default=False)),
                ('ab_test_percentage', models.FloatField(default=0.0, help_text='Percentage of jobs to apply this ruleset to (0-100)')),
            ],
            options={
                'verbose_name': 'Routing Rule Set',
                'verbose_name_plural': 'Routing Rule Sets',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContainerJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('timeout', 'Timeout'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('override_command', models.TextField(blank=True, help_text='Override the template\'s default command. Examples:\n• Single command: python main.py --config=prod\n• Shell command: bash -c "echo Starting...; python app.py; echo Done"\n• Multi-step: bash -c "pip install -r requirements.txt && python manage.py migrate && python manage.py runserver"\n• Script execution: /bin/sh /scripts/deploy.sh --environment=staging\n• Data processing: python process_data.py --input=/data/input.csv --output=/data/results.json\nLeave blank to use the template\'s default command.')),
                ('override_environment', models.JSONField(blank=True, default=dict, help_text='Additional or override environment variables for this specific job. Examples:\n• Simple config: {"DEBUG": "true", "LOG_LEVEL": "info"}\n• Database: {"DB_HOST": "prod-db.company.com", "DB_NAME": "prod_db"}\n• API keys: {"API_KEY": "sk-1234567890", "WEBHOOK_URL": "https://api.company.com/webhook"}\n• File paths: {"INPUT_FILE": "/data/batch_2024.csv", "OUTPUT_DIR": "/results/batch_001"}\n• Feature flags: {"ENABLE_FEATURE_X": "true", "USE_NEW_ALGORITHM": "false"}\nThese merge with template environment variables, with job values taking precedence.')),
                ('execution_id', models.CharField(blank=True, default='', help_text='Unified execution identifier for all executor types', max_length=255)),
                ('container_id', models.CharField(blank=True, default='', max_length=100)),
                ('exit_code', models.IntegerField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('executor_type', models.CharField(choices=[('docker', 'Docker'), ('cloudrun', 'Google Cloud Run'), ('fargate', 'AWS Fargate'), ('scaleway', 'Scaleway Containers'), ('mock', 'Mock (Testing)')], default='docker', help_text='Container execution backend to use for this job', max_length=50)),
                ('preferred_executor', models.CharField(blank=True, choices=[('docker', 'Docker'), ('cloudrun', 'Google Cloud Run'), ('fargate', 'AWS Fargate'), ('scaleway', 'Scaleway Containers'), ('mock', 'Mock (Testing)')], default='', help_text='Preferred executor type for this job (used by routing logic)', max_length=50)),
                ('routing_reason', models.TextField(blank=True, default='', help_text='Explanation of why this executor was chosen for this job')),
                ('external_execution_id', models.CharField(blank=True, default='', help_text="Cloud provider's execution/job ID (e.g., Cloud Run job name, Fargate task ARN)", max_length=200)),
                ('executor_metadata', models.JSONField(blank=True, default=dict, help_text="Executor-specific runtime data and identifiers. Examples:\n• Docker: {'container_name': 'my-job-123', 'network': 'bridge'}\n• Cloud Run: {'job_name': 'job-abc123', 'region': 'us-central1', 'project': 'my-project'}\n• AWS Fargate: {'task_arn': 'arn:aws:ecs:...', 'cluster': 'my-cluster', 'task_definition': 'my-task:1'}\n• Custom: Any JSON data your executor needs to track or reference the job")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Container Job',
                'verbose_name_plural': 'Container Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContainerExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_memory_usage', models.PositiveIntegerField(blank=True, help_text='Peak memory usage in bytes', null=True)),
                ('cpu_usage_percent', models.FloatField(blank=True, help_text='Average CPU usage percentage', null=True)),
                ('stdout_log', models.TextField(blank=True)),
                ('stderr_log', models.TextField(blank=True)),
                ('docker_log', models.TextField(blank=True, help_text='Docker daemon logs and events')),
                ('clean_output', models.TextField(blank=True, help_text='Stdout with timestamps and metadata stripped')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='execution', to='container_manager.containerjob')),
            ],
            options={
                'verbose_name': 'Container Execution',
                'verbose_name_plural': 'Container Executions',
            },
        ),
        migrations.CreateModel(
            name='ContainerTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('docker_image', models.CharField(max_length=500)),
                ('command', models.TextField(blank=True, help_text='Command to run in container (optional)')),
                ('working_directory', models.CharField(blank=True, max_length=500)),
                ('memory_limit', models.PositiveIntegerField(blank=True, help_text='Memory limit in MB', null=True)),
                ('cpu_limit', models.FloatField(blank=True, help_text='CPU limit (e.g., 1.5 for 1.5 cores)', null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(32.0)])),
                ('timeout_seconds', models.PositiveIntegerField(default=3600, help_text='Maximum execution time in seconds')),
                ('override_environment_variables_text', models.TextField(blank=True, help_text='Environment variable overrides, one per line in KEY=value format. These override any variables from the template. Example:\nDEBUG=true\nWORKER_COUNT=4', verbose_name='Environment Variable Overrides')),
                ('auto_remove', models.BooleanField(default=False, help_text='[DEPRECATED] Use cleanup process instead of auto-remove')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Container Template',
                'verbose_name_plural': 'Container Templates',
            },
        ),
        migrations.AddField(
            model_name='containerjob',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='container_manager.containertemplate'),
        ),
        migrations.CreateModel(
            name='EnvironmentVariableTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('environment_variables_text', models.TextField(blank=True, help_text='Environment variables, one per line in KEY=value format. Example:\nDEBUG=true\nAPI_KEY=secret123\nTIMEOUT=300', verbose_name='Environment Variables')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Environment Variable Template',
                'verbose_name_plural': 'Environment Variable Templates',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='containertemplate',
            name='environment_template',
            field=models.ForeignKey(blank=True, help_text='Optional environment variable template to use as base configuration', null=True, on_delete=django.db.models.deletion.SET_NULL, to='container_manager.environmentvariabletemplate'),
        ),
        migrations.AddField(
            model_name='containerjob',
            name='docker_host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='container_manager.executorhost'),
        ),
        migrations.CreateModel(
            name='RoutingRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('condition', models.TextField(help_text='Python expression that evaluates to True/False')),
                ('target_executor', models.CharField(choices=[('docker', 'Docker'), ('cloudrun', 'Cloud Run'), ('fargate', 'AWS Fargate'), ('mock', 'Mock (Testing)')], max_length=50)),
                ('priority', models.IntegerField(default=100, help_text='Lower numbers = higher priority')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('execution_count', models.PositiveIntegerField(default=0)),
                ('success_count', models.PositiveIntegerField(default=0)),
                ('last_executed', models.DateTimeField(blank=True, null=True)),
                ('ruleset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='container_manager.routingruleset')),
            ],
            options={
                'verbose_name': 'Routing Rule',
                'verbose_name_plural': 'Routing Rules',
                'ordering': ['priority', 'created_at'],
                'unique_together': {('ruleset', 'name')},
            },
        ),
        migrations.CreateModel(
            name='RuleValidationResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_case', models.CharField(max_length=100)),
                ('expected_result', models.BooleanField()),
                ('actual_result', models.BooleanField()),
                ('passed', models.BooleanField()),
                ('error_message', models.TextField(blank=True)),
                ('tested_at', models.DateTimeField(auto_now_add=True)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='container_manager.routingrule')),
            ],
            options={
                'verbose_name': 'Rule Validation Result',
                'verbose_name_plural': 'Rule Validation Results',
                'ordering': ['-tested_at'],
            },
        ),
        migrations.CreateModel(
            name='NetworkAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('network_name', models.CharField(max_length=200)),
                ('aliases', models.JSONField(blank=True, default=list, help_text='Network aliases for the container')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_assignments', to='container_manager.containertemplate')),
            ],
            options={
                'verbose_name': 'Network Assignment',
                'verbose_name_plural': 'Network Assignments',
                'unique_together': {('template', 'network_name')},
            },
        ),
        migrations.CreateModel(
            name='RoutingDecision',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_id', models.UUIDField()),
                ('selected_executor', models.CharField(max_length=50)),
                ('decision_reason', models.TextField()),
                ('evaluated_rules', models.JSONField(default=list)),
                ('job_context', models.JSONField(default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('execution_time_ms', models.FloatField(blank=True, null=True)),
                ('is_ab_test', models.BooleanField(default=False)),
                ('ab_test_group', models.CharField(blank=True, max_length=50)),
                ('rule_used', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='container_manager.routingrule')),
                ('ruleset_used', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='container_manager.routingruleset')),
            ],
            options={
                'verbose_name': 'Routing Decision',
                'verbose_name_plural': 'Routing Decisions',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['job_id'], name='container_m_job_id_32ec26_idx'), models.Index(fields=['selected_executor'], name='container_m_selecte_5af052_idx'), models.Index(fields=['timestamp'], name='container_m_timesta_24a59f_idx')],
            },
        ),
        
        # Optimal performance indexes for common query patterns
        migrations.RunSQL([
            # Job lookup optimizations
            "CREATE INDEX container_job_status_created_idx ON container_manager_containerjob(status, created_at);",
            "CREATE INDEX container_job_host_status_idx ON container_manager_containerjob(docker_host_id, status);",
            "CREATE INDEX container_job_execution_lookup ON container_manager_containerjob(execution_id) WHERE execution_id != '';",
            
            # Host lookup optimizations  
            "CREATE INDEX executor_host_type_active_idx ON container_manager_executorhost(executor_type, is_active);",
        ], reverse_sql=[
            # Cleanup indexes if migration is reversed
            "DROP INDEX IF EXISTS container_job_status_created_idx;",
            "DROP INDEX IF EXISTS container_job_host_status_idx;", 
            "DROP INDEX IF EXISTS container_job_execution_lookup;",
            "DROP INDEX IF EXISTS executor_host_type_active_idx;",
        ]),
    ]
