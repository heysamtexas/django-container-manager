# Generated by Django 5.2.4 on 2025-07-30 15:29

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


def copy_template_data_to_jobs(apps, schema_editor):
    """Copy template data to jobs and merge environment variables"""
    ContainerJob = apps.get_model('container_manager', 'ContainerJob')
    ContainerTemplate = apps.get_model('container_manager', 'ContainerTemplate')
    NetworkAssignment = apps.get_model('container_manager', 'NetworkAssignment')
    
    jobs_updated = 0
    
    for job in ContainerJob.objects.select_related('template').all():
        if job.template:
            template = job.template
            
            # Copy basic template fields
            job.description = template.description or ""
            job.docker_image = template.docker_image or ""
            job.working_directory = template.working_directory or ""
            job.memory_limit = template.memory_limit
            job.cpu_limit = template.cpu_limit
            job.timeout_seconds = template.timeout_seconds or 3600
            
            # Handle command - use override_command if set, otherwise template command
            if hasattr(job, 'override_command') and job.override_command:
                job.command = job.override_command
            else:
                job.command = template.command or ""
            
            # Merge environment variables
            template_env_vars = {}
            if template.environment_template:
                # Parse environment_variables_text from template
                env_text = template.environment_template.environment_variables_text or ""
                for line in env_text.strip().split('\n'):
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        template_env_vars[key.strip()] = value.strip()
            
            # Parse template override environment variables
            override_text = template.override_environment_variables_text or ""
            for line in override_text.strip().split('\n'):
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    template_env_vars[key.strip()] = value.strip()
            
            # Set base environment variables
            job.environment_variables = template_env_vars
            
            # Handle network configuration
            network_assignments = NetworkAssignment.objects.filter(template=template)
            network_config = []
            for assignment in network_assignments:
                network_config.append({
                    "network_name": assignment.network_name,
                    "aliases": assignment.aliases or []
                })
            job.network_configuration = network_config
            
            job.save()
            jobs_updated += 1
    
    print(f"Updated {jobs_updated} jobs with template data")


def reverse_copy_template_data(apps, schema_editor):
    """Reverse operation - this would be complex, so we'll just pass"""
    # In a real scenario, you might want to recreate templates from job data
    # but for this migration, we'll just pass since it's not easily reversible
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('container_manager', '0002_containerjob_clean_output_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='containerjob',
            name='override_command',
        ),
        migrations.AddField(
            model_name='containerjob',
            name='command',
            field=models.TextField(blank=True, help_text='Command to run in container (optional)'),
        ),
        migrations.AddField(
            model_name='containerjob',
            name='cpu_limit',
            field=models.FloatField(blank=True, help_text='CPU limit (e.g., 1.5 for 1.5 cores)', null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(32.0)]),
        ),
        migrations.AddField(
            model_name='containerjob',
            name='description',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='containerjob',
            name='docker_image',
            field=models.CharField(blank=True, default='', max_length=500),
        ),
        migrations.AddField(
            model_name='containerjob',
            name='environment_variables',
            field=models.JSONField(blank=True, default=dict, help_text='Environment variables for this job. Examples:\n{"DEBUG": "true", "LOG_LEVEL": "info"}\n{"DB_HOST": "prod-db.company.com", "DB_NAME": "prod_db"}\n{"API_KEY": "sk-1234567890", "WEBHOOK_URL": "https://api.company.com/webhook"}\n{"INPUT_FILE": "/data/batch_2024.csv", "OUTPUT_DIR": "/results/batch_001"}\n{"ENABLE_FEATURE_X": "true", "USE_NEW_ALGORITHM": "false"}'),
        ),
        migrations.AddField(
            model_name='containerjob',
            name='memory_limit',
            field=models.PositiveIntegerField(blank=True, help_text='Memory limit in MB', null=True),
        ),
        migrations.AddField(
            model_name='containerjob',
            name='network_configuration',
            field=models.JSONField(blank=True, default=list, help_text='Network configuration for the container. Examples:\n[{"network_name": "bridge", "aliases": []}]\n[{"network_name": "app-network", "aliases": ["api", "backend"]}]\n[{"network_name": "database-network", "aliases": []}]'),
        ),
        migrations.AddField(
            model_name='containerjob',
            name='timeout_seconds',
            field=models.PositiveIntegerField(default=3600, help_text='Maximum execution time in seconds'),
        ),
        migrations.AddField(
            model_name='containerjob',
            name='working_directory',
            field=models.CharField(blank=True, max_length=500),
        ),
        migrations.AlterField(
            model_name='containerjob',
            name='override_environment',
            field=models.JSONField(blank=True, default=dict, help_text='Additional environment variables that override the base environment_variables. Examples:\n{"DEBUG": "true", "LOG_LEVEL": "debug"}\n{"BATCH_ID": "2024-001", "RETRY_COUNT": "3"}\nThese merge with environment_variables, with override values taking precedence.'),
        ),
        migrations.AlterField(
            model_name='containerjob',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='container_manager.containertemplate'),
        ),
        # Copy template data to jobs after all fields are added
        migrations.RunPython(copy_template_data_to_jobs, reverse_copy_template_data),
    ]
